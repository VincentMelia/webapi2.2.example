//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.4.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using webapi22.example.data_access.FactoryClasses;
using webapi22.example.data_access.DaoClasses;
using webapi22.example.data_access.RelationClasses;
using webapi22.example.data_access.HelperClasses;
using webapi22.example.data_access.CollectionClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace webapi22.example.data_access.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'TodoListItem'. <br/><br/></summary>
	[Serializable]
	public partial class TodoListItemEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private TodoListEntity _todoList;
		private bool	_todoListReturnsNewIfNotFound;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static TodoListItemEntityStaticMetaData _staticMetaData = new TodoListItemEntityStaticMetaData();
		private static TodoListItemRelations _relationsFactory = new TodoListItemRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name TodoList</summary>
			public static readonly string TodoList = "TodoList";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class TodoListItemEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public TodoListItemEntityStaticMetaData()
			{
				SetEntityCoreInfo("TodoListItemEntity", InheritanceHierarchyType.None, false, (int)webapi22.example.data_access.EntityType.TodoListItemEntity, typeof(TodoListItemEntity), typeof(TodoListItemEntityFactory), false);
				AddNavigatorMetaData<TodoListItemEntity, TodoListEntity>("TodoList", "TodoListItems", (a, b) => a._todoList = b, a => a._todoList, (a, b) => a.TodoList = b, webapi22.example.data_access.RelationClasses.StaticTodoListItemRelations.TodoListEntityUsingTodoListIdStatic, ()=>new TodoListItemRelations().TodoListEntityUsingTodoListId, null, new int[] { (int)TodoListItemFieldIndex.TodoListId }, null, true, (int)webapi22.example.data_access.EntityType.TodoListEntity);
			}
		}
		
		/// <summary>Static ctor</summary>
		static TodoListItemEntity()
		{
		}

		/// <summary>CTor</summary>
		public TodoListItemEntity() :base()
		{
			InitClassEmpty(null);
		}
		
		/// <summary>CTor</summary>
		/// <param name="todoListItemId">PK value for TodoListItem which data should be fetched into this TodoListItem object</param>
		public TodoListItemEntity(System.Guid todoListItemId)
		{
			InitClassFetch(todoListItemId, null, null);
		}

		/// <summary>CTor</summary>
		/// <param name="todoListItemId">PK value for TodoListItem which data should be fetched into this TodoListItem object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		public TodoListItemEntity(System.Guid todoListItemId, IPrefetchPath prefetchPathToUse)
		{
			InitClassFetch(todoListItemId, null, prefetchPathToUse);
		}

		/// <summary>CTor</summary>
		/// <param name="todoListItemId">PK value for TodoListItem which data should be fetched into this TodoListItem object</param>
		/// <param name="validator">The custom validator object for this TodoListItemEntity</param>
		public TodoListItemEntity(System.Guid todoListItemId, IValidator validator)
		{
			InitClassFetch(todoListItemId, validator, null);
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected TodoListItemEntity(SerializationInfo info, StreamingContext context):base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}



		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="todoListItemId">PK value for TodoListItem which data should be fetched into this TodoListItem object</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Guid todoListItemId)
		{
			return FetchUsingPK(todoListItemId, null, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="todoListItemId">PK value for TodoListItem which data should be fetched into this TodoListItem object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Guid todoListItemId, IPrefetchPath prefetchPathToUse)
		{
			return FetchUsingPK(todoListItemId, prefetchPathToUse, null, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="todoListItemId">PK value for TodoListItem which data should be fetched into this TodoListItem object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Guid todoListItemId, IPrefetchPath prefetchPathToUse, Context contextToUse)
		{
			return FetchUsingPK(todoListItemId, prefetchPathToUse, contextToUse, null);
		}

		/// <summary>Fetches the contents of this entity from the persistent storage using the primary key.</summary>
		/// <param name="todoListItemId">PK value for TodoListItem which data should be fetched into this TodoListItem object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		public bool FetchUsingPK(System.Guid todoListItemId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			return Fetch(todoListItemId, prefetchPathToUse, contextToUse, excludedIncludedFields);
		}

		/// <inheritdoc/>
		public override bool Refetch()
		{
			return Fetch(this.TodoListItemId, null, null, null);
		}

		/// <summary>Retrieves the related entity of type 'TodoListEntity', using a relation of type 'n:1'</summary>
		/// <param name="forceFetch">if true, it will discard any changes currently in the currently loaded related entity and will refetch the entity from the persistent storage</param>
		/// <returns>A fetched entity of type 'TodoListEntity' which is related to this entity.</returns>
		public virtual TodoListEntity GetSingleTodoList(bool forceFetch=false)
		{
			return PerformSingleEntityLazyLoading<TodoListEntity>("TodoList", forceFetch, _todoListReturnsNewIfNotFound, e=>e.FetchUsingPK(this.TodoListId));
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validatorToUse">Validator to use.</param>
		private void InitClassEmpty(IValidator validatorToUse)
		{
			OnInitializing();
			this.Fields = CreateFields();
			this.Validator = validatorToUse;
			InitClassMembers();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}		

		/// <summary>Initializes the the entity and fetches the data related to the entity in this entity.</summary>
		/// <param name="todoListItemId">PK value for TodoListItem which data should be fetched into this TodoListItem object</param>
		/// <param name="validator">The validator object for this TodoListItemEntity</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		private void InitClassFetch(System.Guid todoListItemId, IValidator validator, IPrefetchPath prefetchPathToUse)
		{
			OnInitializing();
			this.Validator = validator;
			this.Fields = CreateFields();
			InitClassMembers();	
			Fetch(todoListItemId, prefetchPathToUse, null, null);

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassFetch
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{			_todoListReturnsNewIfNotFound = false;
			PerformDependencyInjection();

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}


		/// <summary>Fetches the entity from the persistent storage. Fetch simply reads the entity into an EntityFields object. </summary>
		/// <param name="todoListItemId">PK value for TodoListItem which data should be fetched into this TodoListItem object</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch as well</param>
		/// <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>True if succeeded, false otherwise.</returns>
		private bool Fetch(System.Guid todoListItemId, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			try
			{
				OnFetch();
				this.Fields[(int)TodoListItemFieldIndex.TodoListItemId].ForcedCurrentValueWrite(todoListItemId);
				CreateDAOInstance().FetchExisting(this, this.Transaction, prefetchPathToUse, contextToUse, excludedIncludedFields);
				return (this.Fields.State == EntityState.Fetched);
			}
			finally
			{
				OnFetchComplete();
			}
		}

		/// <summary>Creates the DAO instance for this type</summary>
		/// <returns></returns>
		protected override IDao CreateDAOInstance() { return DAOFactory.CreateTodoListItemDAO(); }
		
		/// <summary>Gets the entity static meta data instance from the generated type.</summary>
		/// <returns>The instance requested</returns>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() { return _staticMetaData; }
		
		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static TodoListItemRelations Relations { get { return _relationsFactory; } }


		/// <summary>Creates a new PrefetchPathElement object which contains all the information to prefetch the related entities of type 'TodoList'  for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement implementation.</returns>
		public static IPrefetchPathElement PrefetchPathTodoList { get { return _staticMetaData.GetPrefetchPathElement("TodoList", new webapi22.example.data_access.CollectionClasses.TodoListCollection()); } }


		/// <summary>The TodoListItemId property of the Entity TodoListItem<br/><br/></summary>
		/// <remarks>Mapped on  table field: "TodoListItem"."TodoListItemId"<br/>
		/// Table field type characteristics (type, precision, scale, length): UniqueIdentifier, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Guid TodoListItemId
		{
			get { return (System.Guid)GetValue((int)TodoListItemFieldIndex.TodoListItemId, true); }
			set	{ SetValue((int)TodoListItemFieldIndex.TodoListItemId, value, true); }
		}

		/// <summary>The TodoListId property of the Entity TodoListItem<br/><br/></summary>
		/// <remarks>Mapped on  table field: "TodoListItem"."TodoListId"<br/>
		/// Table field type characteristics (type, precision, scale, length): UniqueIdentifier, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Guid TodoListId
		{
			get { return (System.Guid)GetValue((int)TodoListItemFieldIndex.TodoListId, true); }
			set	{ SetValue((int)TodoListItemFieldIndex.TodoListId, value, true); }
		}

		/// <summary>The TodoListItemSubject property of the Entity TodoListItem<br/><br/></summary>
		/// <remarks>Mapped on  table field: "TodoListItem"."TodoListItemSubject"<br/>
		/// Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String TodoListItemSubject
		{
			get { return (System.String)GetValue((int)TodoListItemFieldIndex.TodoListItemSubject, true); }
			set	{ SetValue((int)TodoListItemFieldIndex.TodoListItemSubject, value, true); }
		}

		/// <summary>The TodoListItemIsComplete property of the Entity TodoListItem<br/><br/></summary>
		/// <remarks>Mapped on  table field: "TodoListItem"."TodoListItemIsComplete"<br/>
		/// Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0<br/>
		/// Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Boolean> TodoListItemIsComplete
		{
			get { return (Nullable<System.Boolean>)GetValue((int)TodoListItemFieldIndex.TodoListItemIsComplete, false); }
			set	{ SetValue((int)TodoListItemFieldIndex.TodoListItemIsComplete, value, true); }
		}


		/// <summary>Gets / sets related entity of type 'TodoListEntity'. This property is not visible in databound grids.
		/// Setting this property to a new object will make the load-on-demand feature to stop fetching data from the database, until you set this
		/// property to null. Setting this property to an entity will make sure that FK-PK relations are synchronized when appropriate.<br/><br/></summary>
		[Browsable(false)]
		public virtual TodoListEntity TodoList
		{
			get	{ return GetSingleTodoList(false); }
			set { SetSingleRelatedEntityNavigator(value, "TodoList"); }
		}

		/// <summary>Gets / sets the lazy loading flag for TodoList. When set to true, TodoList is always refetched from the 
		/// persistent storage. When set to false, the data is only fetched the first time TodoList is accessed. You can always execute a forced fetch by calling GetSingleTodoList(true).</summary>
		[Browsable(false)]
		public bool AlwaysFetchTodoList
		{
			get	{ return GetAlwaysFetchValueForNavigator("TodoList"); }
			set	{ SetAlwaysFetchValueForNavigator("TodoList", value); }	
		}
				
		/// <summary>Gets / Sets the lazy loading flag if the property TodoList already has been fetched. Setting this property to false when TodoList has been fetched
		/// will set TodoList to null as well. Setting this property to true while TodoList hasn't been fetched disables lazy loading for TodoList</summary>
		[Browsable(false)]
		public bool AlreadyFetchedTodoList
		{
			get { return GetAlreadyFetchedValueForNavigator("TodoList");}
			set { SetAlreadyFetchedValueForNavigator("TodoList", value, true);}
		}

		/// <summary>Gets / sets the flag for what to do if the related entity available through the property TodoList is not found
		/// in the database. When set to true, TodoList will return a new entity instance if the related entity is not found, otherwise 
		/// null be returned if the related entity is not found. Default: false.</summary>
		[Browsable(false)]
		public bool TodoListReturnsNewIfNotFound
		{
			get	{ return _todoListReturnsNewIfNotFound; }
			set { _todoListReturnsNewIfNotFound = value; }	
		}



		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace webapi22.example.data_access
{
	public enum TodoListItemFieldIndex
	{
		///<summary>TodoListItemId. </summary>
		TodoListItemId,
		///<summary>TodoListId. </summary>
		TodoListId,
		///<summary>TodoListItemSubject. </summary>
		TodoListItemSubject,
		///<summary>TodoListItemIsComplete. </summary>
		TodoListItemIsComplete,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace webapi22.example.data_access.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: TodoListItem. </summary>
	public partial class TodoListItemRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between TodoListItemEntity and TodoListEntity over the m:1 relation they have, using the relation between the fields: TodoListItem.TodoListId - TodoList.TodoListId</summary>
		public virtual IEntityRelation TodoListEntityUsingTodoListId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "TodoList", false, new[] { TodoListFields.TodoListId, TodoListItemFields.TodoListId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticTodoListItemRelations
	{
		internal static readonly IEntityRelation TodoListEntityUsingTodoListIdStatic = new TodoListItemRelations().TodoListEntityUsingTodoListId;

		/// <summary>CTor</summary>
		static StaticTodoListItemRelations() { }
	}
}
